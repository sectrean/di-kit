// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// InterfaceCMock is an autogenerated mock type for the InterfaceC type
type InterfaceCMock struct {
	mock.Mock
}

type InterfaceCMock_Expecter struct {
	mock *mock.Mock
}

func (_m *InterfaceCMock) EXPECT() *InterfaceCMock_Expecter {
	return &InterfaceCMock_Expecter{mock: &_m.Mock}
}

// C provides a mock function with given fields:
func (_m *InterfaceCMock) C() {
	_m.Called()
}

// InterfaceCMock_C_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'C'
type InterfaceCMock_C_Call struct {
	*mock.Call
}

// C is a helper method to define mock.On call
func (_e *InterfaceCMock_Expecter) C() *InterfaceCMock_C_Call {
	return &InterfaceCMock_C_Call{Call: _e.mock.On("C")}
}

func (_c *InterfaceCMock_C_Call) Run(run func()) *InterfaceCMock_C_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *InterfaceCMock_C_Call) Return() *InterfaceCMock_C_Call {
	_c.Call.Return()
	return _c
}

func (_c *InterfaceCMock_C_Call) RunAndReturn(run func()) *InterfaceCMock_C_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields:
func (_m *InterfaceCMock) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InterfaceCMock_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type InterfaceCMock_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *InterfaceCMock_Expecter) Close() *InterfaceCMock_Close_Call {
	return &InterfaceCMock_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *InterfaceCMock_Close_Call) Run(run func()) *InterfaceCMock_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *InterfaceCMock_Close_Call) Return(_a0 error) *InterfaceCMock_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InterfaceCMock_Close_Call) RunAndReturn(run func() error) *InterfaceCMock_Close_Call {
	_c.Call.Return(run)
	return _c
}

// NewInterfaceCMock creates a new instance of InterfaceCMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInterfaceCMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *InterfaceCMock {
	mock := &InterfaceCMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
