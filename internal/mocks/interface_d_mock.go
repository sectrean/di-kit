// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// InterfaceDMock is an autogenerated mock type for the InterfaceD type
type InterfaceDMock struct {
	mock.Mock
}

type InterfaceDMock_Expecter struct {
	mock *mock.Mock
}

func (_m *InterfaceDMock) EXPECT() *InterfaceDMock_Expecter {
	return &InterfaceDMock_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *InterfaceDMock) Close() {
	_m.Called()
}

// InterfaceDMock_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type InterfaceDMock_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *InterfaceDMock_Expecter) Close() *InterfaceDMock_Close_Call {
	return &InterfaceDMock_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *InterfaceDMock_Close_Call) Run(run func()) *InterfaceDMock_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *InterfaceDMock_Close_Call) Return() *InterfaceDMock_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *InterfaceDMock_Close_Call) RunAndReturn(run func()) *InterfaceDMock_Close_Call {
	_c.Call.Return(run)
	return _c
}

// D provides a mock function with given fields:
func (_m *InterfaceDMock) D() {
	_m.Called()
}

// InterfaceDMock_D_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'D'
type InterfaceDMock_D_Call struct {
	*mock.Call
}

// D is a helper method to define mock.On call
func (_e *InterfaceDMock_Expecter) D() *InterfaceDMock_D_Call {
	return &InterfaceDMock_D_Call{Call: _e.mock.On("D")}
}

func (_c *InterfaceDMock_D_Call) Run(run func()) *InterfaceDMock_D_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *InterfaceDMock_D_Call) Return() *InterfaceDMock_D_Call {
	_c.Call.Return()
	return _c
}

func (_c *InterfaceDMock_D_Call) RunAndReturn(run func()) *InterfaceDMock_D_Call {
	_c.Call.Return(run)
	return _c
}

// NewInterfaceDMock creates a new instance of InterfaceDMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInterfaceDMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *InterfaceDMock {
	mock := &InterfaceDMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
