// Code generated by mockery v2.43.0. DO NOT EDIT.

package di

import (
	reflect "reflect"

	mock "github.com/stretchr/testify/mock"
)

// serviceMock is an autogenerated mock type for the service type
type serviceMock struct {
	mock.Mock
}

type serviceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *serviceMock) EXPECT() *serviceMock_Expecter {
	return &serviceMock_Expecter{mock: &_m.Mock}
}

// AddAlias provides a mock function with given fields: alias
func (_m *serviceMock) AddAlias(alias reflect.Type) error {
	ret := _m.Called(alias)

	if len(ret) == 0 {
		panic("no return value specified for AddAlias")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(reflect.Type) error); ok {
		r0 = rf(alias)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// serviceMock_AddAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddAlias'
type serviceMock_AddAlias_Call struct {
	*mock.Call
}

// AddAlias is a helper method to define mock.On call
//   - alias reflect.Type
func (_e *serviceMock_Expecter) AddAlias(alias interface{}) *serviceMock_AddAlias_Call {
	return &serviceMock_AddAlias_Call{Call: _e.mock.On("AddAlias", alias)}
}

func (_c *serviceMock_AddAlias_Call) Run(run func(alias reflect.Type)) *serviceMock_AddAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(reflect.Type))
	})
	return _c
}

func (_c *serviceMock_AddAlias_Call) Return(_a0 error) *serviceMock_AddAlias_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *serviceMock_AddAlias_Call) RunAndReturn(run func(reflect.Type) error) *serviceMock_AddAlias_Call {
	_c.Call.Return(run)
	return _c
}

// Aliases provides a mock function with given fields:
func (_m *serviceMock) Aliases() []reflect.Type {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Aliases")
	}

	var r0 []reflect.Type
	if rf, ok := ret.Get(0).(func() []reflect.Type); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]reflect.Type)
		}
	}

	return r0
}

// serviceMock_Aliases_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Aliases'
type serviceMock_Aliases_Call struct {
	*mock.Call
}

// Aliases is a helper method to define mock.On call
func (_e *serviceMock_Expecter) Aliases() *serviceMock_Aliases_Call {
	return &serviceMock_Aliases_Call{Call: _e.mock.On("Aliases")}
}

func (_c *serviceMock_Aliases_Call) Run(run func()) *serviceMock_Aliases_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *serviceMock_Aliases_Call) Return(_a0 []reflect.Type) *serviceMock_Aliases_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *serviceMock_Aliases_Call) RunAndReturn(run func() []reflect.Type) *serviceMock_Aliases_Call {
	_c.Call.Return(run)
	return _c
}

// Dependencies provides a mock function with given fields:
func (_m *serviceMock) Dependencies() []serviceKey {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Dependencies")
	}

	var r0 []serviceKey
	if rf, ok := ret.Get(0).(func() []serviceKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]serviceKey)
		}
	}

	return r0
}

// serviceMock_Dependencies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dependencies'
type serviceMock_Dependencies_Call struct {
	*mock.Call
}

// Dependencies is a helper method to define mock.On call
func (_e *serviceMock_Expecter) Dependencies() *serviceMock_Dependencies_Call {
	return &serviceMock_Dependencies_Call{Call: _e.mock.On("Dependencies")}
}

func (_c *serviceMock_Dependencies_Call) Run(run func()) *serviceMock_Dependencies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *serviceMock_Dependencies_Call) Return(_a0 []serviceKey) *serviceMock_Dependencies_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *serviceMock_Dependencies_Call) RunAndReturn(run func() []serviceKey) *serviceMock_Dependencies_Call {
	_c.Call.Return(run)
	return _c
}

// GetCloser provides a mock function with given fields: val
func (_m *serviceMock) GetCloser(val interface{}) Closer {
	ret := _m.Called(val)

	if len(ret) == 0 {
		panic("no return value specified for GetCloser")
	}

	var r0 Closer
	if rf, ok := ret.Get(0).(func(interface{}) Closer); ok {
		r0 = rf(val)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Closer)
		}
	}

	return r0
}

// serviceMock_GetCloser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCloser'
type serviceMock_GetCloser_Call struct {
	*mock.Call
}

// GetCloser is a helper method to define mock.On call
//   - val interface{}
func (_e *serviceMock_Expecter) GetCloser(val interface{}) *serviceMock_GetCloser_Call {
	return &serviceMock_GetCloser_Call{Call: _e.mock.On("GetCloser", val)}
}

func (_c *serviceMock_GetCloser_Call) Run(run func(val interface{})) *serviceMock_GetCloser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *serviceMock_GetCloser_Call) Return(_a0 Closer) *serviceMock_GetCloser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *serviceMock_GetCloser_Call) RunAndReturn(run func(interface{}) Closer) *serviceMock_GetCloser_Call {
	_c.Call.Return(run)
	return _c
}

// GetValue provides a mock function with given fields: deps
func (_m *serviceMock) GetValue(deps []interface{}) (interface{}, error) {
	ret := _m.Called(deps)

	if len(ret) == 0 {
		panic("no return value specified for GetValue")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func([]interface{}) (interface{}, error)); ok {
		return rf(deps)
	}
	if rf, ok := ret.Get(0).(func([]interface{}) interface{}); ok {
		r0 = rf(deps)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func([]interface{}) error); ok {
		r1 = rf(deps)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// serviceMock_GetValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetValue'
type serviceMock_GetValue_Call struct {
	*mock.Call
}

// GetValue is a helper method to define mock.On call
//   - deps []interface{}
func (_e *serviceMock_Expecter) GetValue(deps interface{}) *serviceMock_GetValue_Call {
	return &serviceMock_GetValue_Call{Call: _e.mock.On("GetValue", deps)}
}

func (_c *serviceMock_GetValue_Call) Run(run func(deps []interface{})) *serviceMock_GetValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]interface{}))
	})
	return _c
}

func (_c *serviceMock_GetValue_Call) Return(_a0 interface{}, _a1 error) *serviceMock_GetValue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *serviceMock_GetValue_Call) RunAndReturn(run func([]interface{}) (interface{}, error)) *serviceMock_GetValue_Call {
	_c.Call.Return(run)
	return _c
}

// Lifetime provides a mock function with given fields:
func (_m *serviceMock) Lifetime() Lifetime {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Lifetime")
	}

	var r0 Lifetime
	if rf, ok := ret.Get(0).(func() Lifetime); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(Lifetime)
	}

	return r0
}

// serviceMock_Lifetime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Lifetime'
type serviceMock_Lifetime_Call struct {
	*mock.Call
}

// Lifetime is a helper method to define mock.On call
func (_e *serviceMock_Expecter) Lifetime() *serviceMock_Lifetime_Call {
	return &serviceMock_Lifetime_Call{Call: _e.mock.On("Lifetime")}
}

func (_c *serviceMock_Lifetime_Call) Run(run func()) *serviceMock_Lifetime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *serviceMock_Lifetime_Call) Return(_a0 Lifetime) *serviceMock_Lifetime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *serviceMock_Lifetime_Call) RunAndReturn(run func() Lifetime) *serviceMock_Lifetime_Call {
	_c.Call.Return(run)
	return _c
}

// Tag provides a mock function with given fields:
func (_m *serviceMock) Tag() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Tag")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// serviceMock_Tag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Tag'
type serviceMock_Tag_Call struct {
	*mock.Call
}

// Tag is a helper method to define mock.On call
func (_e *serviceMock_Expecter) Tag() *serviceMock_Tag_Call {
	return &serviceMock_Tag_Call{Call: _e.mock.On("Tag")}
}

func (_c *serviceMock_Tag_Call) Run(run func()) *serviceMock_Tag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *serviceMock_Tag_Call) Return(_a0 interface{}) *serviceMock_Tag_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *serviceMock_Tag_Call) RunAndReturn(run func() interface{}) *serviceMock_Tag_Call {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function with given fields:
func (_m *serviceMock) Type() reflect.Type {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 reflect.Type
	if rf, ok := ret.Get(0).(func() reflect.Type); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(reflect.Type)
		}
	}

	return r0
}

// serviceMock_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type serviceMock_Type_Call struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
func (_e *serviceMock_Expecter) Type() *serviceMock_Type_Call {
	return &serviceMock_Type_Call{Call: _e.mock.On("Type")}
}

func (_c *serviceMock_Type_Call) Run(run func()) *serviceMock_Type_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *serviceMock_Type_Call) Return(_a0 reflect.Type) *serviceMock_Type_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *serviceMock_Type_Call) RunAndReturn(run func() reflect.Type) *serviceMock_Type_Call {
	_c.Call.Return(run)
	return _c
}

// setCloserFactory provides a mock function with given fields: _a0
func (_m *serviceMock) setCloserFactory(_a0 closerFactory) {
	_m.Called(_a0)
}

// serviceMock_setCloserFactory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'setCloserFactory'
type serviceMock_setCloserFactory_Call struct {
	*mock.Call
}

// setCloserFactory is a helper method to define mock.On call
//   - _a0 closerFactory
func (_e *serviceMock_Expecter) setCloserFactory(_a0 interface{}) *serviceMock_setCloserFactory_Call {
	return &serviceMock_setCloserFactory_Call{Call: _e.mock.On("setCloserFactory", _a0)}
}

func (_c *serviceMock_setCloserFactory_Call) Run(run func(_a0 closerFactory)) *serviceMock_setCloserFactory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(closerFactory))
	})
	return _c
}

func (_c *serviceMock_setCloserFactory_Call) Return() *serviceMock_setCloserFactory_Call {
	_c.Call.Return()
	return _c
}

func (_c *serviceMock_setCloserFactory_Call) RunAndReturn(run func(closerFactory)) *serviceMock_setCloserFactory_Call {
	_c.Call.Return(run)
	return _c
}

// setLifetime provides a mock function with given fields: _a0
func (_m *serviceMock) setLifetime(_a0 Lifetime) {
	_m.Called(_a0)
}

// serviceMock_setLifetime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'setLifetime'
type serviceMock_setLifetime_Call struct {
	*mock.Call
}

// setLifetime is a helper method to define mock.On call
//   - _a0 Lifetime
func (_e *serviceMock_Expecter) setLifetime(_a0 interface{}) *serviceMock_setLifetime_Call {
	return &serviceMock_setLifetime_Call{Call: _e.mock.On("setLifetime", _a0)}
}

func (_c *serviceMock_setLifetime_Call) Run(run func(_a0 Lifetime)) *serviceMock_setLifetime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Lifetime))
	})
	return _c
}

func (_c *serviceMock_setLifetime_Call) Return() *serviceMock_setLifetime_Call {
	_c.Call.Return()
	return _c
}

func (_c *serviceMock_setLifetime_Call) RunAndReturn(run func(Lifetime)) *serviceMock_setLifetime_Call {
	_c.Call.Return(run)
	return _c
}

// setTag provides a mock function with given fields: _a0
func (_m *serviceMock) setTag(_a0 interface{}) {
	_m.Called(_a0)
}

// serviceMock_setTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'setTag'
type serviceMock_setTag_Call struct {
	*mock.Call
}

// setTag is a helper method to define mock.On call
//   - _a0 interface{}
func (_e *serviceMock_Expecter) setTag(_a0 interface{}) *serviceMock_setTag_Call {
	return &serviceMock_setTag_Call{Call: _e.mock.On("setTag", _a0)}
}

func (_c *serviceMock_setTag_Call) Run(run func(_a0 interface{})) *serviceMock_setTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *serviceMock_setTag_Call) Return() *serviceMock_setTag_Call {
	_c.Call.Return()
	return _c
}

func (_c *serviceMock_setTag_Call) RunAndReturn(run func(interface{})) *serviceMock_setTag_Call {
	_c.Call.Return(run)
	return _c
}

// newServiceMock creates a new instance of serviceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *serviceMock {
	mock := &serviceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
